{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Notice.tsx","src/components/ApproveButton.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","tiny","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","length","EmptyList","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","onWithdraw","Farming","large","TokenItem","Deposit","DepositInfo","marginRight","formatPercentage","isZero","AddLiquidityNotice","onAmountChanged","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","pow10","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","DepositButton","gt","message","code","catch","FarmingScreen","Platform","OS"],"mappings":"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","file":"static/js/13.4d81d119.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"plant-lp-tokens\")} />\n                    <Text light={true}>{t(\"plant-lp-tokens-desc\")}</Text>\n                    <Farming />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const t = useTranslation();\n    const state = useFarmingState(false);\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={t(\"active-farms\")}\n                emptyText={t(\"unable-to-load-farms\")}\n                Item={TokenItem}\n            />\n            <Border />\n            <Deposit state={state} />\n            <DepositInfo state={state} />\n            <Notice text={t(\"sushi-vested-notice\")} clear={true} style={{ marginTop: Spacing.normal }} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const apy = props.token.apy || 0;\n    const multiplier = props.token.multiplier || 0;\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, alignItems: \"flex-end\", marginRight: 4 }}>\n                    <Text note={true}>\n                        {multiplier > 1 ? \"✨\" : \"\"}\n                        {multiplier.toFixed(2) || \"1.00\"}x APY\n                    </Text>\n                    <Text caption={IS_DESKTOP} medium={true}>\n                        {formatPercentage(apy)}%\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\n            {state.selectedLPToken.balance.isZero() ? (\n                <AddLiquidityNotice state={state} />\n            ) : (\n                <TokenInput\n                    token={state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                    autoFocus={IS_DESKTOP}\n                />\n            )}\n        </View>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <>\n            <Notice\n                color={green}\n                text={t(\"tokens-needed-for-farming-notice\", { symbol: state.selectedLPToken!.symbol })}\n            />\n            <Button\n                color={green}\n                title={t(\"add-liquidity\")}\n                containerStyle={{ marginTop: Spacing.normal }}\n                onPress={onPress}\n            />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\n    const sushiPerYear = disabled\n        ? 0\n        : parseBalance(state.amount)\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\n              .div(pow10(18));\n    return (\n        <InfoBox>\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={t(\"sushi-per-year\")} disabled={disabled} />\n            <Meta\n                label={t(\"my-balance\")}\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"total-value-locked\")}\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"annual-percentage-yield\")}\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\n                suffix={\"%\"}\n                disabled={!state.selectedLPToken}\n            />\n            <DepositControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\n                <DepositButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={t(\"deposit\")} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}